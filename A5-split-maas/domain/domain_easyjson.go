// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package domain

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain(in *jlexer.Lexer, out *WorkerPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "VertexIds":
			if in.IsNull() {
				in.Skip()
				out.VertexIds = nil
			} else {
				in.Delim('[')
				if out.VertexIds == nil {
					if !in.IsDelim(']') {
						out.VertexIds = make([]int64, 0, 8)
					} else {
						out.VertexIds = []int64{}
					}
				} else {
					out.VertexIds = (out.VertexIds)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.VertexIds = append(out.VertexIds, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "superstep":
			out.Superstep = int64(in.Int64())
		case "algorithm":
			out.Algorithm = GraphAlgorithm(in.String())
		case "extraArgs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ExtraArgs = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					(out.ExtraArgs)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "numberOfVertices":
			out.NumberOfVertices = int64(in.Int64())
		case "runId":
			out.RunId = string(in.String())
		case "memoryClientConfig":
			(out.MemoryClientConfig).UnmarshalEasyJSON(in)
		case "messageClientConfig":
			(out.MessageClientConfig).UnmarshalEasyJSON(in)
		case "storageClientConfig":
			(out.StorageClientConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain(out *jwriter.Writer, in WorkerPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"VertexIds\":"
		out.RawString(prefix[1:])
		if in.VertexIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.VertexIds {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"superstep\":"
		out.RawString(prefix)
		out.Int64(int64(in.Superstep))
	}
	{
		const prefix string = ",\"algorithm\":"
		out.RawString(prefix)
		out.String(string(in.Algorithm))
	}
	{
		const prefix string = ",\"extraArgs\":"
		out.RawString(prefix)
		if in.ExtraArgs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.ExtraArgs {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if m, ok := v5Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"numberOfVertices\":"
		out.RawString(prefix)
		out.Int64(int64(in.NumberOfVertices))
	}
	{
		const prefix string = ",\"runId\":"
		out.RawString(prefix)
		out.String(string(in.RunId))
	}
	{
		const prefix string = ",\"memoryClientConfig\":"
		out.RawString(prefix)
		(in.MemoryClientConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"messageClientConfig\":"
		out.RawString(prefix)
		(in.MessageClientConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"storageClientConfig\":"
		out.RawString(prefix)
		(in.StorageClientConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkerPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkerPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkerPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkerPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain1(in *jlexer.Lexer, out *VertexList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(VertexList, 0, 1)
			} else {
				*out = VertexList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v6 Vertex
			(v6).UnmarshalEasyJSON(in)
			*out = append(*out, v6)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain1(out *jwriter.Writer, in VertexList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in {
			if v7 > 0 {
				out.RawByte(',')
			}
			(v8).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v VertexList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VertexList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VertexList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VertexList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain1(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain2(in *jlexer.Lexer, out *Vertex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "i":
			out.Id = int64(in.Int64())
		case "e":
			if in.IsNull() {
				in.Skip()
				out.Edges = nil
			} else {
				in.Delim('[')
				if out.Edges == nil {
					if !in.IsDelim(']') {
						out.Edges = make([]Edge, 0, 2)
					} else {
						out.Edges = []Edge{}
					}
				} else {
					out.Edges = (out.Edges)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Edge
					(v9).UnmarshalEasyJSON(in)
					out.Edges = append(out.Edges, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "v":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain2(out *jwriter.Writer, in Vertex) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"e\":"
		out.RawString(prefix)
		if in.Edges == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Edges {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Vertex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Vertex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Vertex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Vertex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain2(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain3(in *jlexer.Lexer, out *StorageConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bucketName":
			out.BucketName = string(in.String())
		case "bucketKey":
			out.BucketKey = string(in.String())
		case "region":
			out.Region = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain3(out *jwriter.Writer, in StorageConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bucketName\":"
		out.RawString(prefix[1:])
		out.String(string(in.BucketName))
	}
	{
		const prefix string = ",\"bucketKey\":"
		out.RawString(prefix)
		out.String(string(in.BucketKey))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorageConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorageConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorageConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorageConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain3(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain4(in *jlexer.Lexer, out *StorageClientConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.ClientType = string(in.String())
		case "storageConfig":
			(out.StorageConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain4(out *jwriter.Writer, in StorageClientConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClientType))
	}
	{
		const prefix string = ",\"storageConfig\":"
		out.RawString(prefix)
		(in.StorageConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StorageClientConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StorageClientConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StorageClientConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StorageClientConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain4(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain5(in *jlexer.Lexer, out *StartParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RunId":
			out.RunId = string(in.String())
		case "testRun":
			out.TestRun = bool(in.Bool())
		case "chunkSize":
			out.ChunkSize = int64(in.Int64())
		case "levels":
			out.Levels = int64(in.Int64())
		case "algorithm":
			out.Algorithm = GraphAlgorithm(in.String())
		case "graphName":
			out.GraphName = string(in.String())
		case "extraArgs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ExtraArgs = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 interface{}
					if m, ok := v12.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v12.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v12 = in.Interface()
					}
					(out.ExtraArgs)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maxWorkers":
			out.MaxWorkers = int64(in.Int64())
		case "memoryClientConfig":
			(out.MemoryClientConfig).UnmarshalEasyJSON(in)
		case "messageClientConfig":
			(out.MessageClientConfig).UnmarshalEasyJSON(in)
		case "storageClientConfig":
			(out.StorageClientConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain5(out *jwriter.Writer, in StartParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"RunId\":"
		out.RawString(prefix[1:])
		out.String(string(in.RunId))
	}
	{
		const prefix string = ",\"testRun\":"
		out.RawString(prefix)
		out.Bool(bool(in.TestRun))
	}
	{
		const prefix string = ",\"chunkSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.ChunkSize))
	}
	{
		const prefix string = ",\"levels\":"
		out.RawString(prefix)
		out.Int64(int64(in.Levels))
	}
	{
		const prefix string = ",\"algorithm\":"
		out.RawString(prefix)
		out.String(string(in.Algorithm))
	}
	{
		const prefix string = ",\"graphName\":"
		out.RawString(prefix)
		out.String(string(in.GraphName))
	}
	{
		const prefix string = ",\"extraArgs\":"
		out.RawString(prefix)
		if in.ExtraArgs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v13First := true
			for v13Name, v13Value := range in.ExtraArgs {
				if v13First {
					v13First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v13Name))
				out.RawByte(':')
				if m, ok := v13Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v13Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v13Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"maxWorkers\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxWorkers))
	}
	{
		const prefix string = ",\"memoryClientConfig\":"
		out.RawString(prefix)
		(in.MemoryClientConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"messageClientConfig\":"
		out.RawString(prefix)
		(in.MessageClientConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"storageClientConfig\":"
		out.RawString(prefix)
		(in.StorageClientConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StartParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StartParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StartParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StartParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain5(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain6(in *jlexer.Lexer, out *OrchestratorPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Message":
			out.Message = string(in.String())
		case "MemoryClientConfig":
			(out.MemoryClientConfig).UnmarshalEasyJSON(in)
		case "MessageClientConfig":
			(out.MessageClientConfig).UnmarshalEasyJSON(in)
		case "StorageClientConfig":
			(out.StorageClientConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain6(out *jwriter.Writer, in OrchestratorPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"MemoryClientConfig\":"
		out.RawString(prefix)
		(in.MemoryClientConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"MessageClientConfig\":"
		out.RawString(prefix)
		(in.MessageClientConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"StorageClientConfig\":"
		out.RawString(prefix)
		(in.StorageClientConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrchestratorPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrchestratorPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrchestratorPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrchestratorPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain6(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain7(in *jlexer.Lexer, out *MessageClientConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.ClientType = string(in.String())
		case "db":
			(out.DbConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain7(out *jwriter.Writer, in MessageClientConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClientType))
	}
	{
		const prefix string = ",\"db\":"
		out.RawString(prefix)
		(in.DbConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageClientConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageClientConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageClientConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageClientConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain7(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain8(in *jlexer.Lexer, out *MemoryClientConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.ClientType = string(in.String())
		case "db":
			(out.DbConfig).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain8(out *jwriter.Writer, in MemoryClientConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClientType))
	}
	{
		const prefix string = ",\"db\":"
		out.RawString(prefix)
		(in.DbConfig).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoryClientConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoryClientConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoryClientConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoryClientConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain8(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain9(in *jlexer.Lexer, out *IdValuePair) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "i":
			out.Id = int64(in.Int64())
		case "v":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain9(out *jwriter.Writer, in IdValuePair) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IdValuePair) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IdValuePair) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IdValuePair) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IdValuePair) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain9(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain10(in *jlexer.Lexer, out *GlobalParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "runId":
			out.RunId = string(in.String())
		case "superstep":
			out.Superstep = int64(in.Int64())
		case "numberOfVertices":
			out.NumberOfVertices = int64(in.Int64())
		case "numberOfEdges":
			out.NumberOfEdges = int64(in.Int64())
		case "numberOfBuckets":
			out.NumberOfBuckets = int64(in.Int64())
		case "chunkSize":
			out.ChunkSize = int64(in.Int64())
		case "finished":
			out.Finished = bool(in.Bool())
		case "dataIngestionDuration":
			out.DataIngestionDuration = int64(in.Int64())
		case "executionDuration":
			out.ExecutionDuration = int64(in.Int64())
		case "algorithm":
			out.Algorithm = GraphAlgorithm(in.String())
		case "graphName":
			out.GraphName = string(in.String())
		case "extraArgs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ExtraArgs = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 interface{}
					if m, ok := v14.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v14.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v14 = in.Interface()
					}
					(out.ExtraArgs)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "maxWorkers":
			out.MaxWorkers = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain10(out *jwriter.Writer, in GlobalParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"runId\":"
		out.RawString(prefix[1:])
		out.String(string(in.RunId))
	}
	{
		const prefix string = ",\"superstep\":"
		out.RawString(prefix)
		out.Int64(int64(in.Superstep))
	}
	{
		const prefix string = ",\"numberOfVertices\":"
		out.RawString(prefix)
		out.Int64(int64(in.NumberOfVertices))
	}
	{
		const prefix string = ",\"numberOfEdges\":"
		out.RawString(prefix)
		out.Int64(int64(in.NumberOfEdges))
	}
	{
		const prefix string = ",\"numberOfBuckets\":"
		out.RawString(prefix)
		out.Int64(int64(in.NumberOfBuckets))
	}
	{
		const prefix string = ",\"chunkSize\":"
		out.RawString(prefix)
		out.Int64(int64(in.ChunkSize))
	}
	{
		const prefix string = ",\"finished\":"
		out.RawString(prefix)
		out.Bool(bool(in.Finished))
	}
	{
		const prefix string = ",\"dataIngestionDuration\":"
		out.RawString(prefix)
		out.Int64(int64(in.DataIngestionDuration))
	}
	{
		const prefix string = ",\"executionDuration\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExecutionDuration))
	}
	{
		const prefix string = ",\"algorithm\":"
		out.RawString(prefix)
		out.String(string(in.Algorithm))
	}
	{
		const prefix string = ",\"graphName\":"
		out.RawString(prefix)
		out.String(string(in.GraphName))
	}
	{
		const prefix string = ",\"extraArgs\":"
		out.RawString(prefix)
		if in.ExtraArgs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.ExtraArgs {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				if m, ok := v15Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v15Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v15Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"maxWorkers\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxWorkers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GlobalParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GlobalParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GlobalParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GlobalParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain10(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain11(in *jlexer.Lexer, out *Edge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "i":
			out.TargetVertexId = int64(in.Int64())
		case "v":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain11(out *jwriter.Writer, in Edge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"i\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.TargetVertexId))
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Edge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Edge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Edge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Edge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain11(l, v)
}
func easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain12(in *jlexer.Lexer, out *DatabaseConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.Ip = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "shardsCount":
			out.ShardsCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain12(out *jwriter.Writer, in DatabaseConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ip\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ip))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"shardsCount\":"
		out.RawString(prefix)
		out.Int(int(in.ShardsCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DatabaseConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DatabaseConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e1fa5ecEncodeGithubComDevLucian93ThesisGoDomain12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DatabaseConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DatabaseConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e1fa5ecDecodeGithubComDevLucian93ThesisGoDomain12(l, v)
}
